fn calc1() -> i32 {
    let mut moves: Vec<(i32, i32)> = Vec::new();
    for line in INPUT.lines() {
        let (dir, n) = line.split_at(2);
        let m = match dir {
            "R " => (1, 0),
            "L " => (-1, 0),
            "U " => (0, 1),
            "D " => (0, -1),
            _ => (0, 0),
        };
        moves.extend(std::iter::repeat(m).take(n.parse::<usize>().unwrap()));
    }

    let mut grid = [['.'; SIZE]; SIZE];
    let mut h: (i32, i32) = ((SIZE / 2) as i32, (SIZE / 2) as i32);
    let mut t: (i32, i32) = ((SIZE / 2) as i32, (SIZE / 2) as i32);
    grid[SIZE / 2][SIZE / 2] = '#';

    for m in moves {
        h = (h.0 + m.0, h.1 + m.1);
        let t_move = match (t.0 - h.0, t.1 - h.1) {
            (-1, -2) => Some((1, 1)),
            (0, -2) => Some((0, 1)),
            (1, -2) => Some((-1, 1)),
            (-2, -1) => Some((1, 1)),
            (-2, 0) => Some((1, 0)),
            (-2, 1) => Some((1, -1)),
            (2, -1) => Some((-1, 1)),
            (2, 0) => Some((-1, 0)),
            (2, 1) => Some((-1, -1)),
            (-1, 2) => Some((1, -1)),
            (0, 2) => Some((0, -1)),
            (1, 2) => Some((-1, -1)),
            _ => None,
        };
        if let Some((i, j)) = t_move {
            t = (t.0 + i, t.1 + j);
            grid[t.1 as usize][t.0 as usize] = '#';
        }

        // for (i, row) in grid.iter().enumerate().rev() {
        //     for (j, c) in row.iter().enumerate() {
        //         if i == h.1 as usize && j == h.0 as usize {
        //             print!("H");
        //         } else if i == t.1 as usize && j == t.0 as usize {
        //             print!("T");
        //         } else {
        //             print!("{}", c);
        //         }
        //     }
        //     println!();
        // }
    }

    let count = grid
        .iter()
        .map(|row| row.iter().filter(|c| **c == '#').count() as i32)
        .sum();

    return count;
}

fn calc2() -> i32 {
    let mut moves: Vec<(i32, i32)> = Vec::new();
    for line in INPUT.lines() {
        let (dir, n) = line.split_at(2);
        let m = match dir {
            "R " => (1, 0),
            "L " => (-1, 0),
            "U " => (0, 1),
            "D " => (0, -1),
            _ => (0, 0),
        };
        moves.extend(std::iter::repeat(m).take(n.parse::<usize>().unwrap()));
    }

    let mut grid = [['.'; SIZE]; SIZE];
    let mut knots = vec![((SIZE / 2) as i32, (SIZE / 2) as i32); 10];
    grid[SIZE / 2][SIZE / 2] = '#';

    fn resolve(k_lead: (i32, i32), k_follow: &mut (i32, i32)) {
        let k_move: Option<(i32, i32)> = match (k_follow.0 - k_lead.0, k_follow.1 - k_lead.1) {
            (-1, -2) => Some((1, 1)),
            (0, -2) => Some((0, 1)),
            (1, -2) => Some((-1, 1)),
            (-2, -1) => Some((1, 1)),
            (-2, 0) => Some((1, 0)),
            (-2, 1) => Some((1, -1)),
            (2, -1) => Some((-1, 1)),
            (2, 0) => Some((-1, 0)),
            (2, 1) => Some((-1, -1)),
            (-1, 2) => Some((1, -1)),
            (0, 2) => Some((0, -1)),
            (1, 2) => Some((-1, -1)),
            // corners
            (-2, 2) => Some((1, -1)),
            (-2, -2) => Some((1, 1)),
            (2, 2) => Some((-1, -1)),
            (2, -2) => Some((-1, 1)),
            _ => None,
        };
        if let Some((x, y)) = k_move {
            *k_follow = (k_follow.0 + x, k_follow.1 + y);
        }
    }

    for m in moves {
        knots[0] = (knots[0].0 + m.0, knots[0].1 + m.1);
        for i in 1..knots.len() {
            resolve(knots[i - 1], &mut knots[i]);
        }
        let t = knots.last().unwrap();
        grid[t.1 as usize][t.0 as usize] = '#';

        // for (i, row) in grid.iter().enumerate().rev() {
        //     for (j, c) in row.iter().enumerate() {
        //         let mut ch = *c;
        //         for (n, k) in knots.iter().enumerate() {
        //             if i == k.1 as usize && j == k.0 as usize {
        //                 ch = char::from_digit(n as u32, 10).unwrap();
        //                 break;
        //             }
        //         }
        //         print!("{}", ch);
        //     }
        //     println!();
        // }
    }

    let count = grid
        .iter()
        .map(|row| row.iter().filter(|c| **c == '#').count() as i32)
        .sum();

    return count;
}

pub fn calc() {
    println!("{}\n{}", calc1(), calc2());
}

const SIZE: usize = 1000;
const INPUT: &str = r#"U 1
L 2
U 2
D 2
L 2
U 1
D 1
U 2
D 1
U 2
D 1
R 2
U 2
L 1
U 2
D 2
R 1
U 1
R 2
L 1
R 2
D 2
R 2
D 2
U 1
R 1
D 2
L 2
D 1
R 2
D 2
R 1
L 2
R 1
L 2
R 1
U 1
D 2
L 1
D 1
R 1
U 1
D 2
L 1
U 1
L 2
R 1
D 2
U 1
L 1
D 1
L 1
R 2
D 1
L 1
R 1
L 2
D 2
U 2
D 1
R 2
U 1
L 1
U 2
L 1
U 2
R 2
U 1
D 1
L 2
R 2
D 2
L 1
D 2
R 2
D 1
L 1
D 2
L 1
R 1
L 1
R 2
U 1
R 1
D 1
R 1
D 2
R 2
D 2
U 1
L 1
D 1
R 1
L 2
D 1
U 2
D 1
R 1
D 2
U 2
D 1
R 1
D 1
R 1
U 2
L 1
U 1
R 1
L 2
R 1
L 1
D 2
L 2
R 1
D 3
L 3
U 1
R 2
U 1
R 2
L 1
D 1
L 3
U 2
L 3
D 1
U 2
L 3
U 1
R 2
L 1
R 1
L 2
D 2
R 3
L 1
U 1
L 1
R 1
U 1
D 3
L 3
D 2
R 2
L 2
D 1
U 2
L 2
U 1
R 3
D 3
L 3
R 2
D 3
L 3
U 1
D 3
L 2
R 2
D 3
R 2
L 1
U 3
D 2
R 2
D 3
U 1
D 3
R 3
D 2
U 1
L 2
D 2
U 2
R 1
L 3
U 2
R 2
U 1
R 2
D 1
R 2
D 3
U 1
L 1
U 2
L 1
D 2
R 1
U 1
D 1
R 3
U 3
R 1
U 1
L 3
D 2
R 2
U 1
R 2
D 2
R 3
L 2
U 2
R 1
L 3
U 2
R 1
D 3
L 2
U 2
R 3
U 3
L 1
R 3
D 3
L 2
R 3
D 2
R 3
U 3
R 1
U 2
D 4
L 3
D 2
L 4
R 2
D 4
L 1
R 3
L 1
D 4
U 4
D 1
R 4
U 2
D 2
R 1
U 2
D 1
L 3
D 2
U 2
L 1
R 3
L 3
U 3
L 2
R 1
D 2
R 3
L 2
D 4
U 2
L 3
R 3
L 3
U 4
D 4
L 1
U 3
R 4
L 4
D 4
U 3
R 4
L 2
D 1
U 1
L 4
D 3
U 3
R 2
D 3
U 4
L 2
R 1
L 2
R 2
U 3
L 1
D 4
U 1
L 4
R 3
L 3
R 2
D 4
U 4
L 4
D 3
R 1
D 3
R 4
L 4
R 2
L 2
D 2
R 2
L 2
U 3
R 3
D 2
R 4
L 1
R 2
U 4
L 2
R 1
U 2
R 3
D 2
U 1
R 4
L 3
U 3
D 4
U 1
L 1
R 1
D 2
R 1
D 1
L 2
D 4
U 4
L 4
U 3
D 4
U 4
D 3
U 3
L 5
U 4
L 4
U 5
D 1
L 5
U 2
D 4
U 5
L 4
U 2
D 4
R 3
L 5
U 2
L 1
U 5
L 4
D 2
U 5
R 3
D 2
U 3
L 3
R 3
D 5
U 4
D 5
U 4
R 1
L 1
U 3
L 3
R 4
L 1
U 2
D 3
U 5
L 3
R 5
D 3
U 4
L 1
U 3
R 2
L 2
U 5
D 3
L 5
D 1
R 3
L 5
R 1
D 2
U 3
D 2
L 4
D 4
R 5
L 5
U 1
L 5
R 3
L 3
U 4
R 3
L 3
R 1
L 2
D 1
U 3
L 5
R 1
L 5
U 3
R 4
U 4
D 3
U 2
L 5
D 3
L 3
R 2
D 2
U 3
D 3
R 2
D 3
L 1
R 1
U 1
L 3
R 2
U 3
R 1
D 5
U 5
L 5
D 2
U 4
D 3
U 3
L 4
D 3
U 2
R 1
D 4
L 3
U 5
D 2
L 5
R 4
D 3
L 4
D 3
R 4
D 5
R 2
L 3
D 5
U 3
R 4
U 6
L 5
D 3
U 4
L 1
U 5
R 5
D 3
U 5
D 5
R 2
D 2
U 4
D 2
U 3
R 6
U 4
L 2
R 2
U 3
L 1
U 5
R 6
L 1
D 5
R 5
D 5
L 2
U 3
L 4
R 2
U 3
L 2
U 2
D 4
L 4
R 5
L 6
D 2
L 4
R 2
D 4
L 1
D 6
R 2
U 5
D 2
L 6
U 5
L 4
U 1
D 3
U 1
L 5
U 2
R 6
D 5
U 4
L 5
U 1
L 5
U 2
R 5
U 2
R 4
D 4
R 1
D 6
R 5
L 5
U 6
D 2
R 1
L 4
U 3
D 6
R 4
L 3
R 6
U 2
R 1
U 4
R 5
U 1
D 4
U 1
L 3
D 2
L 2
D 2
L 2
U 6
D 4
L 5
D 2
U 1
L 5
D 2
R 3
L 2
D 2
U 4
L 4
U 6
L 1
R 7
L 4
U 1
L 1
U 6
L 1
D 2
L 5
R 3
U 6
L 6
U 2
D 4
L 2
R 6
L 3
D 4
L 1
R 6
D 4
U 2
D 4
R 2
D 1
U 3
R 6
U 4
D 2
L 6
R 5
L 3
U 1
L 3
U 3
L 7
R 1
L 4
D 5
U 6
L 3
U 2
L 1
D 2
R 4
D 7
R 1
D 5
L 1
D 2
U 2
R 1
L 1
U 2
D 2
R 4
D 7
L 7
D 1
L 4
R 7
U 3
L 4
R 3
U 2
R 5
U 5
L 5
U 2
L 7
R 4
U 2
L 5
R 4
U 7
L 7
R 5
L 6
D 4
L 1
D 6
L 5
R 5
L 7
R 5
D 4
U 4
L 5
U 7
D 6
U 3
L 5
U 4
D 1
L 1
D 7
R 3
D 7
U 3
D 7
R 4
U 5
L 7
R 4
L 5
R 1
D 4
L 3
U 1
R 3
L 1
U 4
R 3
L 5
D 2
R 2
L 4
D 4
L 7
R 7
U 2
D 7
L 5
U 3
L 4
U 7
R 6
D 3
L 2
R 7
L 5
U 6
D 6
L 2
D 2
L 5
D 7
U 5
L 3
D 4
U 4
L 4
R 2
D 8
L 3
R 2
D 4
L 4
U 7
R 8
D 6
R 7
U 1
R 6
U 6
R 4
D 8
L 3
R 3
D 2
U 5
D 8
L 3
D 5
L 7
R 5
L 1
D 4
L 7
U 7
L 8
D 7
L 5
U 3
R 4
U 3
L 7
R 8
D 6
R 2
D 3
R 1
D 6
U 8
D 6
L 2
R 8
D 4
U 3
D 5
U 2
L 3
U 1
R 7
U 6
D 5
R 5
U 4
L 1
D 3
U 7
L 8
U 5
D 5
U 4
D 3
L 5
D 5
R 5
D 3
R 4
U 4
R 8
L 4
D 4
L 2
D 4
R 7
L 8
R 7
L 1
D 3
U 6
R 5
D 1
U 4
R 7
U 1
R 2
L 8
U 8
D 2
L 9
U 9
D 4
U 8
D 3
R 1
U 3
D 1
R 7
L 2
U 4
L 4
U 9
L 7
U 2
L 4
D 5
R 8
L 5
R 4
U 2
L 5
U 2
D 1
L 9
R 5
D 6
U 3
D 5
U 2
L 1
R 7
U 1
L 7
U 1
L 5
D 6
R 6
D 7
U 6
D 7
L 7
D 2
L 6
D 4
U 7
D 4
L 8
D 5
R 7
L 9
D 9
U 3
D 2
U 9
R 4
D 3
U 9
R 4
D 6
L 2
D 1
L 5
U 2
L 5
D 1
R 7
L 9
R 6
D 8
L 2
R 5
D 6
L 9
U 8
R 2
D 4
R 5
U 3
D 4
R 6
D 5
U 9
D 6
L 3
D 6
R 6
D 5
R 7
U 5
L 2
U 2
D 5
U 4
D 8
R 6
U 8
D 2
R 9
U 6
L 1
U 6
L 5
U 10
D 2
U 6
R 10
L 7
U 4
R 2
D 1
U 3
D 6
L 10
U 4
L 5
D 10
R 1
L 5
R 5
U 6
R 1
D 7
L 7
D 4
L 4
D 10
U 1
R 9
L 7
D 7
L 6
D 7
U 7
R 5
L 6
U 3
L 1
D 4
L 1
D 3
U 10
D 10
L 3
R 6
U 4
D 2
L 4
U 1
R 9
D 8
U 7
R 10
U 10
L 4
U 1
L 9
R 7
L 8
R 10
D 6
U 1
R 1
D 10
R 4
L 6
D 2
U 9
R 6
L 4
U 10
R 10
U 4
D 8
U 8
L 9
R 9
D 7
L 1
D 6
L 7
U 4
L 6
R 9
D 6
L 5
D 5
L 5
U 6
R 1
D 4
R 6
L 5
U 9
R 3
D 3
L 10
D 6
U 5
D 6
R 6
D 7
R 3
D 2
L 2
D 9
U 1
D 1
L 1
D 3
U 3
R 4
U 1
L 9
U 9
R 4
D 10
U 2
L 4
U 3
D 1
R 10
U 7
R 5
D 6
L 2
U 5
L 5
U 5
L 4
D 8
R 7
L 5
R 6
U 4
L 7
D 4
R 9
D 7
R 7
L 2
D 8
L 9
D 2
L 7
U 10
R 3
U 5
R 3
D 9
U 9
D 11
U 6
R 3
U 11
D 11
L 11
U 6
D 10
R 9
U 11
R 6
L 4
R 5
L 11
D 9
L 10
R 4
D 11
R 2
L 6
R 3
U 4
L 10
U 6
D 9
L 5
U 3
R 2
U 5
L 7
U 1
L 10
U 9
R 3
D 5
R 9
U 6
D 9
L 6
R 10
D 10
R 8
D 7
L 3
D 4
L 6
R 2
D 11
U 5
D 7
L 1
U 11
L 11
U 3
D 2
L 9
R 8
L 11
R 2
D 9
U 3
L 9
U 6
D 2
L 10
U 8
L 5
R 3
U 3
R 1
L 7
R 10
L 2
R 7
U 5
D 12
L 11
R 2
L 10
U 2
D 3
R 3
U 6
D 1
L 8
R 4
L 5
U 10
R 12
U 9
R 12
L 12
R 6
U 11
D 1
R 9
U 2
R 11
L 1
R 12
U 10
L 9
U 12
R 10
U 12
D 12
U 2
D 11
L 12
R 9
U 3
D 4
L 6
U 3
R 10
D 2
U 11
L 4
R 11
U 11
R 1
D 10
R 6
U 8
L 3
D 6
R 1
U 9
L 3
U 5
D 4
R 12
U 11
D 2
U 10
L 4
D 9
L 4
U 10
D 1
R 1
L 5
R 2
D 12
R 5
U 3
L 11
D 10
L 11
R 7
L 10
U 6
R 12
D 3
R 10
U 1
L 2
D 1
R 1
L 12
U 4
L 3
R 6
L 3
D 6
U 7
R 10
U 6
D 6
R 5
D 10
R 10
D 8
L 10
U 11
R 9
L 4
R 8
U 1
D 3
U 7
L 3
U 10
R 12
U 10
D 10
U 9
D 7
R 4
D 2
R 9
U 13
R 6
L 4
R 9
L 11
U 6
L 12
D 9
R 13
L 2
U 7
D 10
L 13
D 4
U 6
L 8
U 13
R 3
D 2
L 3
R 1
U 1
D 7
L 5
D 6
R 1
D 3
R 5
L 1
D 3
U 11
L 1
D 13
R 5
D 2
L 8
D 10
R 1
L 2
D 2
L 12
R 11
D 13
R 7
D 12
L 2
D 5
L 9
D 8
L 3
D 2
U 4
D 8
R 7
D 8
U 8
R 2
U 10
D 7
L 9
U 1
L 10
R 4
U 1
L 5
R 5
D 10
R 2
L 6
R 4
D 10
L 7
R 11
L 11
U 7
L 1
D 5
U 4
D 6
R 4
U 6
D 7
L 2
D 1
R 11
U 11
D 12
U 4
D 13
R 3
L 4
R 3
L 8
R 4
U 7
L 2
R 8
L 13
D 6
U 11
L 12
U 1
D 3
U 7
L 4
R 5
U 7
D 1
L 9
U 2
R 4
D 9
U 8
R 2
D 9
L 8
D 13
U 13
D 1
U 9
D 5
L 1
U 12
D 2
R 9
L 7
R 1
L 3
R 2
D 12
L 11
D 4
R 11
U 5
L 13
R 2
U 12
L 9
R 10
U 3
D 10
R 8
D 12
U 6
R 7
D 11
L 10
U 14
L 9
U 12
D 4
U 3
D 10
R 6
D 5
R 1
D 10
U 13
L 9
R 7
U 14
D 10
U 7
D 13
L 14
D 14
U 6
D 14
L 8
R 2
D 7
U 14
R 6
L 14
U 14
R 6
D 7
R 7
D 3
U 10
D 10
R 7
U 11
R 3
L 2
R 12
L 13
R 3
U 4
D 1
L 7
U 9
R 9
U 9
L 11
U 7
D 6
R 7
L 3
D 5
U 14
R 8
D 7
L 6
U 6
R 11
D 9
R 6
D 5
L 5
D 1
L 10
R 8
L 15
U 1
D 14
L 1
R 5
D 5
L 3
U 6
R 6
L 4
D 3
L 3
D 4
U 7
L 10
D 8
R 13
D 9
R 15
D 6
U 10
D 14
L 10
U 12
D 13
U 8
L 13
U 11
D 13
L 8
R 12
U 12
D 14
U 15
L 1
R 14
U 15
L 14
U 4
D 2
L 2
R 6
D 15
U 2
R 5
L 7
U 8
D 12
R 2
U 2
R 11
L 3
U 15
R 15
D 1
U 9
R 5
U 1
R 15
U 7
D 8
R 6
U 7
R 1
U 5
R 15
U 9
L 6
U 10
R 10
D 2
U 14
D 13
R 11
L 14
D 6
U 6
D 6
U 10
D 1
U 10
L 11
D 13
U 2
L 14
D 9
R 14
U 9
L 8
D 11
U 3
L 5
U 8
L 1
U 12
L 6
R 5
D 8
R 5
D 9
U 14
R 13
U 6
L 9
R 7
L 5
U 9
L 8
D 9
L 3
R 4
L 8
D 1
L 4
R 6
U 8
L 5
R 12
U 7
R 5
D 8
U 6
R 11
U 1
D 9
L 7
R 10
L 4
R 1
D 11
R 1
U 16
L 6
R 7
D 3
R 4
U 13
R 12
D 1
L 5
D 2
U 4
D 11
L 13
D 4
U 2
D 14
L 3
U 1
D 13
R 14
U 6
R 8
L 16
U 9
D 7
U 15
D 15
L 11
R 15
L 4
D 5
U 3
L 3
D 8
L 6
U 15
L 11
R 14
D 8
U 10
D 6
R 1
L 16
D 16
L 3
U 10
R 5
L 16
R 2
U 15
R 10
U 11
R 15
D 16
L 3
U 15
L 10
R 12
U 13
R 3
L 13
D 15
U 4
R 8
U 6
L 10
R 12
U 1
L 15
D 5
L 1
U 9
D 1
R 16
L 7
U 13
L 13
U 6
L 1
R 14
L 11
U 16
R 15
L 10
D 9
R 9
D 6
U 16
R 4
U 1
L 3
R 16
L 3
U 6
D 15
R 13
D 11
U 15
R 3
L 15
D 14
U 10
R 7
U 4
R 13
L 11
R 13
L 11
R 3
L 5
U 12
L 9
U 8
D 2
U 17
D 3
R 17
U 14
L 9
R 10
D 6
L 5
R 14
L 8
U 2
D 16
R 15
D 12
U 3
L 4
R 12
U 16
D 14
L 12
R 8
D 4
R 9
U 12
R 15
U 6
L 3
D 17
R 3
U 6
L 2
R 2
U 2
D 17
L 4
R 8
U 17
R 16
L 17
U 5
D 11
U 8
L 7
U 3
R 1
D 15
U 14
L 4
D 9
U 15
R 13
L 2
U 4
R 17
U 2
L 13
R 4
U 8
R 15
U 8
D 13
U 10
D 7
U 7
D 17
R 16
L 10
U 10
L 8
R 9
L 8
R 1
D 10
U 17
D 13
U 10
D 13
L 14
R 17
D 5
L 1
U 17
D 17
L 13
U 12
R 10
D 12
R 15
L 15
U 11
L 14
D 15
U 12
D 7
U 15
L 1
U 2
R 18
L 15
U 7
L 8
R 3
D 14
R 7
D 7
U 6
R 10
L 9
R 9
D 17
R 11
D 4
L 16
U 12
R 10
L 4
D 7
U 18
L 11
U 3
L 13
U 5
R 11
D 16
U 14
D 1
R 18
D 4
L 7
U 2
D 9
L 5
R 14
U 18
R 2
U 7
R 8
U 9
L 6
R 12
U 15
R 1
L 7
D 3
U 10
R 5
U 2
L 8
R 13
L 14
D 10
L 10
U 12
R 5
L 13
D 8
U 5
D 17
L 8
D 8
L 7
U 5
D 16
R 9
D 6
U 11
D 16
U 15
D 6
L 4
R 16
D 8
L 11
U 13
R 14
L 12
D 2
U 16
D 1
L 12
D 10
R 1
D 17
L 8
U 13
R 10
U 9
D 4
R 1
U 17
L 5
D 15
U 9
R 15
U 18
L 15
D 18
U 15
D 1
L 9
R 6
L 15
R 3
D 19
L 5
D 10
L 18
D 11
L 14
D 11
U 19
D 5
R 9
L 18
R 11
D 3
L 7
R 4
D 13
L 9
R 14
D 14
L 8
U 10
L 11
U 4
D 13
R 13
L 7
R 7
D 18
U 2
L 17
D 16
R 3
U 12
L 13
U 5
L 1
U 9
R 6
D 14
U 6
R 3
U 6
R 7
D 8
U 11
L 11
R 7
U 17
D 2
L 12
U 18
L 3
U 14
L 6
R 10
L 16
U 19
D 9
R 13
U 5
R 5
D 15
R 1
L 1
U 5
D 16
L 5
R 15
L 14
D 5
R 9
U 12
L 9
U 7
R 16
D 16
R 10
D 15
R 16
L 2
U 13
L 5
D 19
R 18
D 19
R 16
D 12
R 15
D 12
U 5
L 3
R 14
D 7
U 11
R 10
L 18
D 9
U 2
D 19
U 8
D 19
U 18
R 11
D 2
R 8
D 14"#;
